{{>licenseInfo}}
package {{modelPackage}};

{{#imports}}import {{import}};
{{/imports}}

import java.net.URI;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;

import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

/**
 * Model tests for {{appName}}
 */
public abstract class SampleModelData {

    public SampleModelData(long seed) {
        this.random = new Random(seed);
    }

{{#models}}
{{#model}}{{#isEnum}}    public {{classname}} sample{{classname}}(String propertyName) {
        return pickOne({{classname}}.values());
    }
{{/isEnum}}{{^isEnum}}{{#oneOf}}{{#-first}}    public {{classname}} sample{{classname}}(String propertyName) {
        List<Supplier<{{classname}}>> factories = List.of({{/-first}}{{#discriminator}}{{#-first}}{{#mappedModels}}
            () -> sample{{modelName}}(propertyName){{^-last}},{{/-last}}{{/mappedModels}}{{/-first}}{{/discriminator}}{{#-last}}
        );
        return pickOne(factories).get();
    }
{{/-last}}{{/oneOf}}{{/isEnum}}{{^isEnum}}{{^oneOf}}    public {{classname}} sample{{classname}}(String propertyName) {
        return new {{classname}}(){{#vars}}{{^isArray}}{{^isMap}}{{^isPrimitiveType}}{{^isString}}
            .{{name}}(sample{{{datatypeWithEnum}}}("{{name}}")){{/isString}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{^isString}}
            .{{name}}(random{{datatypeWithEnum}}("{{name}}")){{/isString}}{{/isPrimitiveType}}{{#isString}}{{#isEnum}}
            .{{name}}(sample{{classname}}{{datatypeWithEnum}}("{{name}}")){{/isEnum}}{{^isEnum}}
            .{{name}}({{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}random{{datatypeWithEnum}}("{{name}}"{{#isPrimitiveType}}{{#dataFormat}}, "{{dataFormat}}"{{/dataFormat}}{{/isPrimitiveType}}){{/defaultValue}}){{/isEnum}}{{/isString}}{{/isMap}}{{/isArray}}{{#isArray}}{{^items.isArray}}{{^items.isPrimitiveType}}{{#items.isString}}
            .{{name}}(sampleList(() -> random{{{items.datatypeWithEnum}}}("{{name}}"), "{{name}}")){{/items.isString}}{{^items.isString}}
            .{{name}}(sampleListOf{{{items.datatypeWithEnum}}}("{{name}}")){{/items.isString}}{{/items.isPrimitiveType}}{{#items.isPrimitiveType}}
            .{{name}}(sampleList(() -> {{#isEnum}}sample{{classname}}{{{items.datatypeWithEnum}}}("{{name}}"){{/isEnum}}{{^isEnum}}random{{{items.datatypeWithEnum}}}("{{name}}"{{#items.dataFormat}}{{#items.isString}}, "{{items.dataFormat}}"{{/items.isString}}{{/items.dataFormat}}){{/isEnum}}, "{{name}}")){{/items.isPrimitiveType}}{{/items.isArray}}{{#items.isArray}}
            .{{name}}({{name}}For{{classname}}()){{/items.isArray}}{{/isArray}}{{#isMap}}
            .{{name}}(sampleMap(() -> {{^items.isPrimitiveType}}{{^items.isString}}sample{{{items.datatypeWithEnum}}}("{{name}}"){{/items.isString}}{{/items.isPrimitiveType}}{{#items.isPrimitiveType}}{{#isEnum}}sample{{classname}}{{{items.datatypeWithEnum}}}("{{name}}"){{/isEnum}}{{^isEnum}}random{{{items.datatypeWithEnum}}}("{{name}}"{{#items.dataFormat}}{{#items.isString}}, "{{items.dataFormat}}"{{/items.isString}}{{/items.dataFormat}}){{/isEnum}}{{/items.isPrimitiveType}}, "{{name}}")){{/isMap}}{{/vars}}
            ;
    }{{#vars}}{{#isArray}}{{#items.isArray}}

    public abstract {{{datatypeWithEnum}}} {{name}}For{{classname}}();
{{/items.isArray}}{{/isArray}}{{/vars}}
{{/oneOf}}{{/isEnum}}
    public List<{{classname}}> sampleListOf{{classname}}(String propertyName) {
        return sampleList(() -> sample{{classname}}(propertyName), propertyName);
    }
{{#vars}}{{#isEnum}}
{{#isArray}}
    public {{classname}}.{{items.datatypeWithEnum}} sample{{classname}}{{items.datatypeWithEnum}}(String propertyName) {
        return pickOne({{classname}}.{{items.datatypeWithEnum}}.values());
    }
{{/isArray}}
{{^isArray}}
    public {{classname}}.{{datatypeWithEnum}} sample{{classname}}{{datatypeWithEnum}}(String propertyName) {
        return pickOne({{classname}}.{{datatypeWithEnum}}.values());
    }
{{/isArray}}
{{/isEnum}}{{/vars}}
{{/model}}
{{/models}}
{{>sample_random_data}}
}
